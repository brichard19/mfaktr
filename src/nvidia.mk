
# where is the CUDA Toolkit installed?
CUDA_DIR = /usr/local/cuda
CUDA_INCLUDE = -I$(CUDA_DIR)/include/
CUDA_LIB = -L$(CUDA_DIR)/lib64/

HIP_DIR=/opt/rocm
HIP_INCLUDE = -I$(HIP_DIR)/include/
HIP_LIB = -L$(HIP_DIR)/lib/

# Compiler settings for .c files (CPU)
CC = gcc
CFLAGS = -Wall -Wextra -O2 $(HIP_INCLUDE) $(CUDA_INCLUDE) -malign-double -D__HIP_PLATFORM_NVIDIA__
CFLAGS_EXTRA_SIEVE = -funroll-all-loops

# Compiler settings for .cu files (CPU/GPU)
NVCC = nvcc
NVCCFLAGS = $(CUDA_INCLUDE) --ptxas-options=-v

# HIP flags
export CUDA_PATH=$(CUDA_DIR)
export HIP_PLATFORM=nvidia
HIPCC = hipcc
HIPCCFLAGS = $(HIP_INCLUDE) -D__HIP_PLATFORM_NVIDIA__

# generate code for various compute capabilities
# NVCCFLAGS += --generate-code arch=compute_11,code=sm_11 # CC 1.1, 1.2 and 1.3 GPUs will use this code (1.0 is not possible for mfaktc)
# NVCCFLAGS += --generate-code arch=compute_20,code=sm_20 # CC 2.x GPUs will use this code, one code fits all!
# NVCCFLAGS += --generate-code arch=compute_30,code=sm_30 # all CC 3.x GPUs _COULD_ use this code 
# NVCCFLAGS += --generate-code arch=compute_35,code=sm_35 # but CC 3.5 (3.2?) _CAN_ use funnel shift which is useful for mfaktc
# NVCCFLAGS += --generate-code arch=compute_50,code=sm_50 # CC 5.x GPUs will use this code
NVCCFLAGS += --generate-code arch=compute_60,code=sm_60
NVCCFLAGS += --generate-code arch=compute_61,code=sm_61
NVCCFLAGS += --generate-code arch=compute_62,code=sm_62
NVCCFLAGS += --generate-code arch=compute_70,code=sm_70
NVCCFLAGS += --generate-code arch=compute_72,code=sm_72
NVCCFLAGS += --generate-code arch=compute_75,code=sm_75
NVCCFLAGS += --generate-code arch=compute_80,code=sm_80
NVCCFLAGS += --generate-code arch=compute_86,code=sm_86
NVCCFLAGS += --generate-code arch=compute_87,code=sm_87
NVCCFLAGS += --generate-code arch=compute_89,code=sm_89
NVCCFLAGS += --generate-code arch=compute_90,code=sm_90

# pass some options to the C host compiler (e.g. gcc on Linux)
NVCCFLAGS += --compiler-options=-Wall

HIPCCFLAGS += $(NVCCFLAGS)

# Linker
LD = gcc
LDFLAGS = -fPIC $(HIP_LIB) $(CUDA_LIB) -lamdhip64 -lcudart_static -lm -lstdc++

##############################################################################

CSRC  = sieve.c timer.c parse.c read_config.c mfaktc.c checkpoint.c \
	signal_handler.c output.c
CUSRC = tf_72bit.cu tf_96bit.cu tf_barrett96.cu tf_barrett96_gs.cu gpusieve.cu

COBJS  = $(CSRC:.c=.o)
CUOBJS = $(CUSRC:.cu=.o) tf_75bit.o

##############################################################################

all: ../mfaktr-nvidia

../mfaktr-nvidia : $(COBJS) $(CUOBJS)
	$(LD) $^ -o $@ $(LDFLAGS)

clean :
	rm -f *.o *~

sieve.o : sieve.c
	$(CC) $(CFLAGS) $(CFLAGS_EXTRA_SIEVE) -c $< -o $@
	
tf_75bit.o : tf_96bit.cu
	$(HIPCC) $(HIPCCFLAGS) -c $< -o $@ -DSHORTCUT_75BIT
	
%.o : %.cu
	$(HIPCC) $(HIPCCFLAGS) -c $< -o $@

%.o : %.c
	$(CC) $(CFLAGS) -c $< -o $@

##############################################################################

# dependencies generated by cpp -MM
checkpoint.o: checkpoint.c params.h

# manually add selftest-data-mersenne.c or selftest-data-wagstaff.c
mfaktc.o: mfaktc.c params.h my_types.h compatibility.h sieve.h \
 read_config.h parse.h timer.h tf_72bit.h tf_96bit.h tf_barrett96.h \
 checkpoint.h signal_handler.h output.h gpusieve.h \
 selftest-data-mersenne.c selftest-data-wagstaff.c

output.o: output.c params.h my_types.h output.h compatibility.h

parse.o: parse.c compatibility.h parse.h params.h

read_config.o: read_config.c params.h my_types.h

sieve.o: sieve.c params.h compatibility.h

signal_handler.o: signal_handler.c params.h my_types.h compatibility.h

timer.o: timer.c timer.h compatibility.h

tf_72bit.o: tf_72bit.cu params.h my_types.h compatibility.h \
 my_intrinsics.h sieve.h timer.h output.h tf_debug.h tf_common.cu

tf_96bit.o: tf_96bit.cu params.h my_types.h compatibility.h \
 my_intrinsics.h sieve.h timer.h output.h tf_debug.h \
 tf_96bit_base_math.cu tf_96bit_helper.cu gpusieve_helper.cu tf_common.cu \
 tf_common_gs.cu gpusieve.h

tf_barrett96.o: tf_barrett96.cu params.h my_types.h compatibility.h \
 my_intrinsics.h sieve.h timer.h output.h tf_debug.h \
 tf_96bit_base_math.cu tf_96bit_helper.cu tf_barrett96_div.cu \
 tf_barrett96_core.cu tf_common.cu

tf_barrett96_gs.o: tf_barrett96_gs.cu params.h my_types.h compatibility.h \
 my_intrinsics.h sieve.h timer.h output.h tf_debug.h \
 tf_96bit_base_math.cu tf_96bit_helper.cu tf_barrett96_div.cu \
 tf_barrett96_core.cu gpusieve_helper.cu tf_common_gs.cu gpusieve.h

gpusieve.o: gpusieve.cu params.h my_types.h compatibility.h \
 my_intrinsics.h gpusieve.h

# manually generated dependency

tf_75bit.o: tf_96bit.cu params.h my_types.h compatibility.h \
 my_intrinsics.h sieve.h timer.h output.h tf_debug.h \
 tf_96bit_base_math.cu tf_96bit_helper.cu gpusieve_helper.cu tf_common.cu \
 tf_common_gs.cu gpusieve.h
